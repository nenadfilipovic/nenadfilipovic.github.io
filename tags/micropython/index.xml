<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Micropython on Diy &amp; Code</title><link>https://mydiy.space/tags/micropython/</link><description>Recent content in Micropython on Diy &amp; Code</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 07 Oct 2019 20:40:24 +0200</lastBuildDate><atom:link href="https://mydiy.space/tags/micropython/index.xml" rel="self" type="application/rss+xml"/><item><title>Micropython Ota Function</title><link>https://mydiy.space/posts/micropython-ota-function/</link><pubDate>Mon, 07 Oct 2019 20:40:24 +0200</pubDate><guid>https://mydiy.space/posts/micropython-ota-function/</guid><description>I assume you have built your esp-open-sdk and you know how to compile micropython firmware, if you dont know how check older posts. Installation procedure goes like this.
Download yaota8266 and axtls repositories.
Create esp8266ota folder and extract yaota8266 repository in it. Then navigate to esp8266ota/yaota8266/ota_server/lib/axtls and extract axtls repository there. I have tried to clone yaota8266 repository but it was giving me empty axtls folder so I had to do it manually.</description></item><item><title>Micropython Frozen Modules</title><link>https://mydiy.space/posts/micropython-frozen-modules/</link><pubDate>Mon, 07 Oct 2019 20:39:21 +0200</pubDate><guid>https://mydiy.space/posts/micropython-frozen-modules/</guid><description>Last time we finished building custom micropython firmware for esp8266 and now we are going to add our custom modules to it.
Frozen modules are very good option if you are low on memory as I was with one project. Other useful thing is you don&amp;rsquo;t need to upload those files on to rom, they will always be there.
Open port/esp8266 folder and put your python files into modules directory.</description></item><item><title>Build Micropython Firmware</title><link>https://mydiy.space/posts/build-micropython-firmware/</link><pubDate>Mon, 07 Oct 2019 20:35:45 +0200</pubDate><guid>https://mydiy.space/posts/build-micropython-firmware/</guid><description>During building apps for esp8266 boards in micropython I have stumbled across many problems, one problem that was most anoying is memory errors.
Naturally I started searching how to fix those problems and people mentioned few solutions. They have mentioned precompiling source files and that didn&amp;rsquo;t help me. Then they mentioned freezing files into esp8266 flash, that means integrating your own python packages into firmware of your board.
I started exploring that solution and that is why I&amp;rsquo;m making this guide.</description></item><item><title>Post Data to Website Using Esp Board</title><link>https://mydiy.space/posts/post-data-to-website-using-esp-board/</link><pubDate>Mon, 07 Oct 2019 20:29:44 +0200</pubDate><guid>https://mydiy.space/posts/post-data-to-website-using-esp-board/</guid><description>Having many of these boards and wanted to learn micropython, I have decided to make little project and to use esp8266 board to send some data to my website from where I can access it any time or place I want. They are very cheap and can be bought for around $2 on Aliexpress.
Biggest problem I have encountered was when whatever I send to server php did&amp;rsquo;t show anything. I tought it is problem in my python code so I have changed it few times, tried to use post and get dump websites to see how my post request looks and all looked fine.</description></item></channel></rss>